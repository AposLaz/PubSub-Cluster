/// <reference types="node" />
import { IncomingMessage, ServerResponse } from 'http';
import CallableInstance from 'callable-instance';
import { IGripConfig, Publisher } from '@fanoutio/grip';
import IServeGripConfig from './IServeGripConfig';
import { ServeGripApiResponse } from './ServeGripApiResponse';
import { ServeGripApiRequest } from './ServeGripApiRequest';
declare type NextFunction = (e?: Error) => void;
export default class ServeGrip extends CallableInstance<[IncomingMessage, ServerResponse, NextFunction], void> {
    gripProxies?: string | IGripConfig | IGripConfig[] | Publisher;
    prefix: string;
    isGripProxyRequired: boolean;
    _publisher?: Publisher;
    koa: (ctx: any, next: () => Promise<void>) => Promise<void>;
    constructor(config?: IServeGripConfig);
    applyConfig(config?: IServeGripConfig): void;
    getPublisher(): Publisher;
    exec(req: IncomingMessage, res: ServerResponse, fn: NextFunction): void;
    run(req: ServeGripApiRequest, res: ServeGripApiResponse): Promise<boolean>;
}
export {};
