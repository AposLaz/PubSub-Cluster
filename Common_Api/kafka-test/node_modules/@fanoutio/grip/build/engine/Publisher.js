"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Item_1 = __importDefault(require("../data/Item"));
var HttpStreamFormat_1 = __importDefault(require("../data/http/HttpStreamFormat"));
var HttpResponseFormat_1 = __importDefault(require("../data/http/HttpResponseFormat"));
var PublisherClient_1 = __importDefault(require("./PublisherClient"));
var grip_1 = require("../utilities/grip");
// The Publisher class allows consumers to easily publish HTTP response
// and HTTP stream format messages to GRIP proxies. Publisher can be configured
// using IGripConfig objects.
var Publisher = /** @class */ (function () {
    function Publisher(config) {
        if (config === void 0) { config = []; }
        this.clients = [];
        this.applyConfig(config);
    }
    // Apply the specified GRIP configuration to this Publisher instance.
    // The parameter can either be an object or an array of objects where
    // each object corresponds to a single PublisherClient instance. Each object
    // will be parsed and a PublisherClient will be created either using just
    // a URI or a URI and JWT authentication information.
    Publisher.prototype.applyConfig = function (config) {
        var configsAsArray = Array.isArray(config) ? config : [config];
        for (var _i = 0, configsAsArray_1 = configsAsArray; _i < configsAsArray_1.length; _i++) {
            var entry = configsAsArray_1[_i];
            var entryAsConfig = typeof entry === 'string' ? grip_1.parseGripUri(entry) : entry;
            var uri = entryAsConfig.control_uri, iss = entryAsConfig.control_iss, key = entryAsConfig.key;
            var client = new PublisherClient_1.default(uri);
            if (iss != null) {
                client.setAuthJwt({ iss: iss }, key);
            }
            this.addClient(client);
        }
    };
    // Add the specified PublisherClient instance.
    Publisher.prototype.addClient = function (client) {
        this.clients.push(client);
    };
    // The publish method for publishing the specified item to the specified
    // channel on the configured endpoint.
    // This function returns a promise which is resolved when the publish is complete,
    // or rejected with an exception describing the failure if the publish fails.
    Publisher.prototype.publish = function (channel, item) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all(this.clients.map(function (client) { return client.publish(channel, item); }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    // A utility method for publishing an item to the specified channel on the configured endpoint
    // by building it from a single Format object or array of Format objects.
    // This function returns a promise which is resolved when the publish is complete,
    // or rejected with an exception describing the failure if the publish fails.
    Publisher.prototype.publishFormats = function (channel, formats, id, prevId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.publish(channel, new Item_1.default(formats, id, prevId))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    // Publish an HTTP response format message to all of the configured
    // PubControlClients with a specified channel, message, and optional ID, and
    // previous ID.  The 'data' parameter may be provided as either an HttpResponseFormat
    // instance or a string (in which case an HttpResponseFormat instance will
    // be created and have the 'body' field set to the specified string).
    // This function returns a promise which is resolved when the publish is complete,
    // or rejected with an exception describing the failure if the publish fails.
    Publisher.prototype.publishHttpResponse = function (channel, data, id, prevId) {
        return __awaiter(this, void 0, void 0, function () {
            var httpResponse;
            return __generator(this, function (_a) {
                httpResponse = data instanceof HttpResponseFormat_1.default ? data : new HttpResponseFormat_1.default({ body: data });
                return [2 /*return*/, this.publishFormats(channel, httpResponse, id, prevId)];
            });
        });
    };
    // Publish an HTTP stream format message to all of the configured
    // PubControlClients with a specified channel, message, and optional ID, and
    // previous ID.  The 'data' parameter may be provided as either an HttpStreamFormat
    // instance or a string (in which case an HttpStreamFormat instance will
    // be created and have the 'content' field set to the specified string).
    // This function returns a promise which is resolved when the publish is complete,
    // or rejected with an exception describing the failure if the publish fails.
    Publisher.prototype.publishHttpStream = function (channel, data, id, prevId) {
        return __awaiter(this, void 0, void 0, function () {
            var httpStream;
            return __generator(this, function (_a) {
                httpStream = data instanceof HttpStreamFormat_1.default ? data : new HttpStreamFormat_1.default(data);
                return [2 /*return*/, this.publishFormats(channel, httpStream, id, prevId)];
            });
        });
    };
    return Publisher;
}());
exports.default = Publisher;
//# sourceMappingURL=Publisher.js.map