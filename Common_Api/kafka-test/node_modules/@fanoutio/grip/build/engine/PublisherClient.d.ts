/// <reference types="node" />
import 'isomorphic-fetch';
import HttpAgent, { HttpsAgent } from 'agentkeepalive';
import IAuth from '../auth/IAuth';
import IItem from '../data/IItem';
import IItemExport from '../data/IItemExport';
interface IReqHeaders {
    [name: string]: string;
}
interface IReqParams {
    method: string;
    headers: IReqHeaders;
    body: string;
    agent?: HttpAgent;
}
interface IContext {
    statusCode: number;
    headers?: object;
    httpBody?: any;
}
interface FetchResponse {
    status: number;
    headers: object;
    httpBody?: any;
    text: () => Promise<string>;
}
declare type Transport = (url: string, reqParams: IReqParams) => Promise<FetchResponse>;
export default class PublisherClient {
    uri?: string;
    auth?: IAuth;
    httpKeepAliveAgent?: HttpAgent;
    httpsKeepAliveAgent?: HttpsAgent;
    constructor(uri: string);
    setAuthBasic(username: string, password: string): void;
    setAuthJwt(token: string): void;
    setAuthJwt(claim: object, key?: Buffer | string): void;
    publish(channel: string, item: IItem): Promise<void>;
    _startPubCall(uri: string | undefined, authHeader: string | null, items: IItemExport[]): Promise<void>;
    _performHttpRequest(transport: Transport, uri: string, reqParams: IReqParams): Promise<void>;
    _finishHttpRequest(mode: string, httpData: any, context: IContext): void;
}
export {};
