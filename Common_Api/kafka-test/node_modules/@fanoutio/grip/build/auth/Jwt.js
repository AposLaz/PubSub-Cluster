"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var buffer_1 = require("buffer");
var jwt = __importStar(require("jsonwebtoken"));
var Base_1 = __importDefault(require("./Base"));
// JWT authentication class used for building auth headers containing
// JSON web token information in either the form of a claim and
// corresponding key, or the literal token itself.
var Jwt = /** @class */ (function (_super) {
    __extends(Jwt, _super);
    function Jwt() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        // Initialize with the specified claim and key. If only one parameter
        // was provided then treat it as the literal token.
        if (args.length === 1) {
            _this.token = args[0];
            _this.claim = undefined;
            _this.key = undefined;
        }
        else {
            _this.token = undefined;
            _this.claim = args[0];
            _this.key = args[1] instanceof buffer_1.Buffer ? args[1] : buffer_1.Buffer.from(String(args[1]), 'utf8');
        }
        return _this;
    }
    // Returns the auth header containing the JWT token in Bearer format.
    Jwt.prototype.buildHeader = function () {
        var token;
        if (this.token != null) {
            token = this.token;
        }
        else {
            token = jwt.sign(this.claim, this.key, { expiresIn: '10m' });
        }
        return "Bearer " + token;
    };
    return Jwt;
}(Base_1.default));
exports.default = Jwt;
//# sourceMappingURL=Jwt.js.map