"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createGripChannelHeader = exports.parseGripUri = exports.parseChannels = void 0;
var buffer_1 = require("buffer");
var querystring = __importStar(require("querystring"));
var url = __importStar(require("url"));
var Channel_1 = __importDefault(require("../data/Channel"));
var http_1 = require("./http");
var string_1 = require("./string");
// An internal method for parsing the specified parameter into an
// array of Channel instances. The specified parameter can either
// be a string, a Channel instance, or an array of Channel instances.
function parseChannels(inChannels) {
    var channels = !Array.isArray(inChannels) ? [inChannels] : inChannels;
    return channels.map(function (channel) { return (string_1.isString(channel) ? new Channel_1.default(channel) : channel); });
}
exports.parseChannels = parseChannels;
// Parse the specified GRIP URI into a config object that can then be passed
// to the Publisher class. The URI can include 'iss' and 'key' JWT
// authentication query parameters as well as any other required query string
// parameters. The JWT 'key' query parameter can be provided as-is or in base64
// encoded format.
function parseGripUri(uri) {
    var parsedUri = url.parse(uri);
    var iss = null;
    var key = null;
    var params = http_1.parseQueryString(parsedUri.query || '');
    if ('iss' in params) {
        iss = params['iss'];
        delete params['iss'];
    }
    if ('key' in params) {
        key = params['key'];
        delete params['key'];
    }
    if (key != null && string_1.isString(key) && key.startsWith('base64:')) {
        key = key.substring(7);
        // When the key contains a '+' character, if the URL is built carelessly
        // and this segment of the URL contained '+' directly instead of properly
        // being URL-encoded as %2B, then they would have turned into spaces at
        // this point. Turn them back into pluses before decoding the key from base64.
        key = key.replace(/ /g, '+');
        key = buffer_1.Buffer.from(key, 'base64');
    }
    var qs = querystring.stringify(params);
    var path = parsedUri.pathname;
    if (path != null && path.endsWith('/')) {
        path = path.substring(0, path.length - 1);
    }
    var controlUri = parsedUri.protocol + '//' + parsedUri.host + path;
    if (qs != null && qs !== '') {
        controlUri = controlUri + '?' + qs;
    }
    var out = { control_uri: controlUri };
    if (iss != null) {
        out['control_iss'] = iss;
    }
    if (key != null) {
        out['key'] = key;
    }
    return out;
}
exports.parseGripUri = parseGripUri;
// Create a GRIP channel header for the specified channels. The channels
// parameter can be specified as a string representing the channel name,
// a Channel instance, or an array of Channel instances. The returned GRIP
// channel header is used when sending instructions to GRIP proxies via
// HTTP headers.
function createGripChannelHeader(channels) {
    channels = parseChannels(channels);
    var parts = [];
    for (var _i = 0, channels_1 = channels; _i < channels_1.length; _i++) {
        var channel = channels_1[_i];
        var channelExport = channel.export();
        var s = channelExport.name;
        if (channelExport.prevId) {
            s += '; prev-id=' + channelExport.prevId;
        }
        parts.push(s);
    }
    return parts.join(', ');
}
exports.createGripChannelHeader = createGripChannelHeader;
//# sourceMappingURL=grip.js.map