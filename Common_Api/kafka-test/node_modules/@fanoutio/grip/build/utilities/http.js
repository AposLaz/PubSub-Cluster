"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.flattenHeader = exports.parseQueryString = exports.createNextLinkHeader = exports.createMetaHeader = exports.createKeepAliveHeader = void 0;
var querystring = __importStar(require("querystring"));
var string_1 = require("./string");
function createKeepAliveHeader(data, timeout) {
    var output = null;
    if (string_1.isString(data)) {
        try {
            output = string_1.encodeCString(data) + '; format=cstring';
        }
        catch (ex) {
            output = null;
        }
    }
    if (output == null) {
        var buffer = string_1.isString(data) ? Buffer.from(data) : data;
        output = buffer.toString('base64') + '; format=base64';
    }
    output += "; timeout=" + Math.floor(timeout);
    return output;
}
exports.createKeepAliveHeader = createKeepAliveHeader;
function createMetaHeader(data) {
    return Object.entries(data)
        .map(function (_a) {
        var key = _a[0], value = _a[1];
        return key + "=\"" + string_1.escapeQuotes(value) + "\"";
    })
        .join(', ');
}
exports.createMetaHeader = createMetaHeader;
function createNextLinkHeader(uri, timeout) {
    if (timeout === void 0) { timeout = 0; }
    var output = "<" + uri + ">; rel=next";
    if (timeout > 0) {
        output += "; timeout=" + Math.floor(timeout);
    }
    return output;
}
exports.createNextLinkHeader = createNextLinkHeader;
function parseQueryString(query) {
    // Input is expected to be URL-encoded. This means that spaces should be
    // represented as '+', and characters not safe for URLs (especially '+')
    // need to be represented with %XX encoding.
    var paramsObj = querystring.parse(query);
    // Flatten parsed query string
    var params = {};
    for (var _i = 0, _a = Object.entries(paramsObj); _i < _a.length; _i++) {
        var _b = _a[_i], key = _b[0], val = _b[1];
        if (Array.isArray(val)) {
            params[key] = val[0];
        }
        else if (val != null) {
            params[key] = val;
        }
    }
    return params;
}
exports.parseQueryString = parseQueryString;
function flattenHeader(value) {
    if (Array.isArray(value)) {
        return value[0];
    }
    return value;
}
exports.flattenHeader = flattenHeader;
//# sourceMappingURL=http.js.map