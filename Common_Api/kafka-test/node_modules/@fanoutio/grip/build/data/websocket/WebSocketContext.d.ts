/// <reference types="node" />
import IWebSocketEvent from './IWebSocketEvent';
export default class WebSocketContext {
    id: string;
    inEvents: IWebSocketEvent[];
    readIndex: number;
    accepted: boolean;
    closeCode: number | null;
    closed: boolean;
    outCloseCode: number | null;
    outEvents: IWebSocketEvent[];
    origMeta: object;
    meta: object;
    prefix: string;
    constructor(id: string, meta: object, inEvents: IWebSocketEvent[], prefix?: string);
    isOpening(): boolean;
    accept(): void;
    close(code?: number): void;
    canRecv(): boolean;
    disconnect(): void;
    recvRaw(): string | number[] | Buffer | null;
    recv(): string | null;
    send(message: string | Buffer): void;
    sendBinary(message: string | Buffer): void;
    sendControl(message: string | Buffer): void;
    subscribe(channel: string): void;
    unsubscribe(channel: string): void;
    detach(): void;
    getOutgoingEvents(): IWebSocketEvent[];
    toHeaders(): {
        [name: string]: string;
    };
}
