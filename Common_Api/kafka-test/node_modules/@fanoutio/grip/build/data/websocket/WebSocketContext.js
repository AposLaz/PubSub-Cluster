"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var buffer_1 = require("buffer");
var jspack_1 = require("jspack");
/// <reference path="../../../types/jspack.d.ts" />
var webSocketEvents_1 = require("../../utilities/webSocketEvents");
var WebSocketEvent_1 = __importDefault(require("./WebSocketEvent"));
var WebSocketContext = /** @class */ (function () {
    function WebSocketContext(id, meta, inEvents, prefix) {
        if (prefix === void 0) { prefix = ''; }
        this.readIndex = 0;
        this.accepted = false;
        this.closeCode = null;
        this.closed = false;
        this.outCloseCode = null;
        this.outEvents = [];
        this.id = id;
        this.meta = JSON.parse(JSON.stringify(meta));
        this.origMeta = meta;
        this.inEvents = inEvents;
        this.prefix = prefix;
    }
    WebSocketContext.prototype.isOpening = function () {
        return Array.isArray(this.inEvents) && this.inEvents.length > 0 && this.inEvents[0].type === 'OPEN';
    };
    WebSocketContext.prototype.accept = function () {
        this.accepted = true;
    };
    WebSocketContext.prototype.close = function (code) {
        if (code === void 0) { code = 0; }
        this.closed = true;
        this.outCloseCode = code;
    };
    WebSocketContext.prototype.canRecv = function () {
        for (var n = this.readIndex; n < this.inEvents.length; n++) {
            if (['TEXT', 'BINARY', 'CLOSE', 'DISCONNECT'].indexOf(this.inEvents[n].type) > -1) {
                return true;
            }
        }
        return false;
    };
    WebSocketContext.prototype.disconnect = function () {
        this.outEvents.push(new WebSocketEvent_1.default('DISCONNECT'));
    };
    WebSocketContext.prototype.recvRaw = function () {
        var e = null;
        while (e == null && this.readIndex < this.inEvents.length) {
            if (['TEXT', 'BINARY', 'CLOSE', 'DISCONNECT'].indexOf(this.inEvents[this.readIndex].type) > -1) {
                e = this.inEvents[this.readIndex];
            }
            else if (this.inEvents[this.readIndex].type === 'PING') {
                this.outEvents.push(new WebSocketEvent_1.default('PONG'));
            }
            this.readIndex += 1;
        }
        if (e == null) {
            throw new Error('Read from empty buffer.');
        }
        var type = e.type;
        if (type === 'TEXT') {
            return e.content != null ? e.content.toString() : '';
        }
        if (type === 'BINARY') {
            return e.content != null ? e.content : buffer_1.Buffer.alloc(0);
        }
        if (type === 'CLOSE') {
            var content = e.content;
            if (Array.isArray(content) && content.length === 2) {
                this.closeCode = jspack_1.jspack.Unpack('>H', __spreadArrays(content))[0];
            }
            return null;
        }
        else {
            throw new Error('Client disconnected unexpectedly.');
        }
    };
    WebSocketContext.prototype.recv = function () {
        var result = this.recvRaw();
        if (result == null) {
            return null;
        }
        else {
            return result.toString();
        }
    };
    WebSocketContext.prototype.send = function (message) {
        this.outEvents.push(new WebSocketEvent_1.default('TEXT', buffer_1.Buffer.concat([buffer_1.Buffer.from('m:'), message instanceof buffer_1.Buffer ? message : buffer_1.Buffer.from(message)])));
    };
    WebSocketContext.prototype.sendBinary = function (message) {
        this.outEvents.push(new WebSocketEvent_1.default('BINARY', buffer_1.Buffer.concat([buffer_1.Buffer.from('m:'), message instanceof buffer_1.Buffer ? message : buffer_1.Buffer.from(message)])));
    };
    WebSocketContext.prototype.sendControl = function (message) {
        this.outEvents.push(new WebSocketEvent_1.default('TEXT', buffer_1.Buffer.concat([buffer_1.Buffer.from('c:'), message instanceof buffer_1.Buffer ? message : buffer_1.Buffer.from(message)])));
    };
    WebSocketContext.prototype.subscribe = function (channel) {
        this.sendControl(webSocketEvents_1.createWebSocketControlMessage('subscribe', { channel: this.prefix + channel }));
    };
    WebSocketContext.prototype.unsubscribe = function (channel) {
        this.sendControl(webSocketEvents_1.createWebSocketControlMessage('unsubscribe', { channel: this.prefix + channel }));
    };
    WebSocketContext.prototype.detach = function () {
        this.sendControl(webSocketEvents_1.createWebSocketControlMessage('detach'));
    };
    WebSocketContext.prototype.getOutgoingEvents = function () {
        var events = [];
        if (this.accepted) {
            events.push(new WebSocketEvent_1.default('OPEN'));
        }
        for (var _i = 0, _a = this.outEvents; _i < _a.length; _i++) {
            var event_1 = _a[_i];
            events.push(event_1);
        }
        if (this.closed) {
            var octets = jspack_1.jspack.Pack('>H', [this.outCloseCode]);
            if (octets !== false) {
                events.push(new WebSocketEvent_1.default('CLOSE', buffer_1.Buffer.from(octets)));
            }
        }
        return events;
    };
    WebSocketContext.prototype.toHeaders = function () {
        var _this = this;
        // Find all keys of wsContext.origMeta that don't have the same key
        // in wsContext.meta
        var metaToRemove = Object.keys(this.origMeta).filter(function (k) {
            return Object.keys(_this.meta).every(function (nk) { return nk.toLowerCase() !== k; });
        });
        // Find all items in wsContext.meta whose keys and values don't match
        // any in wsContext.origMeta
        var metaToSet = Object.entries(this.meta).reduce(function (acc, _a) {
            var nk = _a[0], nv = _a[1];
            var lname = nk.toLowerCase();
            if (Object.entries(_this.origMeta).every(function (_a) {
                var k = _a[0], v = _a[1];
                return lname !== k || nv !== v;
            })) {
                acc[lname] = nv;
            }
            return acc;
        }, {});
        var headers = {
            'Content-Type': 'application/websocket-events',
        };
        if (this.accepted) {
            headers['Sec-WebSocket-Extensions'] = 'grip';
        }
        for (var _i = 0, metaToRemove_1 = metaToRemove; _i < metaToRemove_1.length; _i++) {
            var k = metaToRemove_1[_i];
            headers['Set-Meta-' + k] = '';
        }
        for (var _a = 0, _b = Object.entries(metaToSet); _a < _b.length; _a++) {
            var _c = _b[_a], k = _c[0], v = _c[1];
            headers['Set-Meta-' + k] = String(v);
        }
        return headers;
    };
    return WebSocketContext;
}());
exports.default = WebSocketContext;
//# sourceMappingURL=WebSocketContext.js.map