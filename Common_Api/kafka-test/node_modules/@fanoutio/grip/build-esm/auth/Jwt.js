var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Buffer } from 'buffer';
import * as jwt from 'jsonwebtoken';
import Base from './Base';
// JWT authentication class used for building auth headers containing
// JSON web token information in either the form of a claim and
// corresponding key, or the literal token itself.
var Jwt = /** @class */ (function (_super) {
    __extends(Jwt, _super);
    function Jwt() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        // Initialize with the specified claim and key. If only one parameter
        // was provided then treat it as the literal token.
        if (args.length === 1) {
            _this.token = args[0];
            _this.claim = undefined;
            _this.key = undefined;
        }
        else {
            _this.token = undefined;
            _this.claim = args[0];
            _this.key = args[1] instanceof Buffer ? args[1] : Buffer.from(String(args[1]), 'utf8');
        }
        return _this;
    }
    // Returns the auth header containing the JWT token in Bearer format.
    Jwt.prototype.buildHeader = function () {
        var token;
        if (this.token != null) {
            token = this.token;
        }
        else {
            token = jwt.sign(this.claim, this.key, { expiresIn: '10m' });
        }
        return "Bearer " + token;
    };
    return Jwt;
}(Base));
export default Jwt;
//# sourceMappingURL=Jwt.js.map