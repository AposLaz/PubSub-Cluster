import * as querystring from 'querystring';
import { encodeCString, escapeQuotes, isString } from './string';
export function createKeepAliveHeader(data, timeout) {
    var output = null;
    if (isString(data)) {
        try {
            output = encodeCString(data) + '; format=cstring';
        }
        catch (ex) {
            output = null;
        }
    }
    if (output == null) {
        var buffer = isString(data) ? Buffer.from(data) : data;
        output = buffer.toString('base64') + '; format=base64';
    }
    output += "; timeout=" + Math.floor(timeout);
    return output;
}
export function createMetaHeader(data) {
    return Object.entries(data)
        .map(function (_a) {
        var key = _a[0], value = _a[1];
        return key + "=\"" + escapeQuotes(value) + "\"";
    })
        .join(', ');
}
export function createNextLinkHeader(uri, timeout) {
    if (timeout === void 0) { timeout = 0; }
    var output = "<" + uri + ">; rel=next";
    if (timeout > 0) {
        output += "; timeout=" + Math.floor(timeout);
    }
    return output;
}
export function parseQueryString(query) {
    // Input is expected to be URL-encoded. This means that spaces should be
    // represented as '+', and characters not safe for URLs (especially '+')
    // need to be represented with %XX encoding.
    var paramsObj = querystring.parse(query);
    // Flatten parsed query string
    var params = {};
    for (var _i = 0, _a = Object.entries(paramsObj); _i < _a.length; _i++) {
        var _b = _a[_i], key = _b[0], val = _b[1];
        if (Array.isArray(val)) {
            params[key] = val[0];
        }
        else if (val != null) {
            params[key] = val;
        }
    }
    return params;
}
export function flattenHeader(value) {
    if (Array.isArray(value)) {
        return value[0];
    }
    return value;
}
//# sourceMappingURL=http.js.map