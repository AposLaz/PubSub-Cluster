var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import debug from './debug';
import { flattenHeader } from "./http";
import WebSocketContext from "../data/websocket/WebSocketContext";
import { decodeWebSocketEvents } from "./webSocketEvents";
import ConnectionIdMissingException from "../data/websocket/ConnectionIdMissingException";
import WebSocketDecodeEventException from "../data/websocket/WebSocketDecodeEventException";
var CONTENT_TYPE_WEBSOCKET_EVENTS = 'application/websocket-events';
export function isWsOverHttp(req) {
    var contentTypeHeader = flattenHeader(req.headers['content-type']);
    if (contentTypeHeader != null) {
        var at = contentTypeHeader.indexOf(';');
        if (at >= 0) {
            contentTypeHeader = contentTypeHeader.substring(0, at);
        }
        debug("content-type header", contentTypeHeader);
    }
    else {
        debug("content-type header not present");
    }
    var acceptTypesHeader = flattenHeader(req.headers['accept']);
    if (acceptTypesHeader != null) {
        debug("accept header", acceptTypesHeader);
    }
    else {
        debug("accept header not present");
    }
    var acceptTypes = acceptTypesHeader === null || acceptTypesHeader === void 0 ? void 0 : acceptTypesHeader.split(',').map(function (item) { return item.trim(); });
    debug("accept types", acceptTypes);
    return req.method === 'POST' && (contentTypeHeader === CONTENT_TYPE_WEBSOCKET_EVENTS || (acceptTypes === null || acceptTypes === void 0 ? void 0 : acceptTypes.includes(CONTENT_TYPE_WEBSOCKET_EVENTS)));
}
export function getWebSocketContextFromReq(req, prefix) {
    if (prefix === void 0) { prefix = ''; }
    return __awaiter(this, void 0, void 0, function () {
        var cid, meta, _i, _a, _b, key, value, lKey, k, _c, events, wsContext;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    cid = flattenHeader(req.headers['connection-id']);
                    if (cid == null) {
                        throw new ConnectionIdMissingException();
                    }
                    debug("Connection ID", cid);
                    // Handle meta keys
                    debug("Handling Meta - start");
                    meta = {};
                    for (_i = 0, _a = Object.entries(req.headers); _i < _a.length; _i++) {
                        _b = _a[_i], key = _b[0], value = _b[1];
                        lKey = key.toLowerCase();
                        if (lKey.startsWith('meta-')) {
                            k = lKey.substring(5);
                            meta[k] = value;
                            debug(k, "=", value);
                        }
                    }
                    debug("Handling Meta - end");
                    if (!(req.body == null)) return [3 /*break*/, 2];
                    debug("Reading body - start");
                    _c = req;
                    return [4 /*yield*/, new Promise(function (resolve) {
                            var bodySegments = [];
                            req.on('data', function (chunk) {
                                bodySegments.push(chunk);
                            });
                            req.on('end', function () {
                                var bodyBuffer = Buffer.concat(bodySegments);
                                resolve(bodyBuffer);
                            });
                        })];
                case 1:
                    _c.body = _d.sent();
                    if (req.body != null) {
                        if (req.body instanceof Buffer) {
                            debug("body (Buffer)", req.body.toString('base64'));
                        }
                        else {
                            debug("body (string)", req.body);
                        }
                    }
                    else {
                        debug("body is null");
                    }
                    debug("Reading body - end");
                    _d.label = 2;
                case 2:
                    debug("Decode body - start");
                    events = null;
                    try {
                        events = decodeWebSocketEvents(req.body);
                    }
                    catch (err) {
                        throw new WebSocketDecodeEventException();
                    }
                    debug("Decode body - end");
                    debug("Websocket Events", events);
                    debug("Creating Websocket Context - start");
                    wsContext = new WebSocketContext(cid, meta, events, prefix);
                    debug("Creating Websocket Context - end");
                    return [2 /*return*/, wsContext];
            }
        });
    });
}
//# sourceMappingURL=ws-over-http.js.map