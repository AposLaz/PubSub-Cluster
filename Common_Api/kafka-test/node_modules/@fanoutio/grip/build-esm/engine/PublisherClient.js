var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { Buffer } from 'buffer';
import 'isomorphic-fetch';
import HttpAgent, { HttpsAgent } from 'agentkeepalive';
import * as auth from '../auth/index';
import PublishException from '../data/PublishException';
// The PublisherClient class allows consumers to publish to an endpoint of
// their choice. The consumer wraps a Format class instance in an Item class
// instance and passes that to the publish method.
var PublisherClient = /** @class */ (function () {
    function PublisherClient(uri) {
        this.httpKeepAliveAgent = new HttpAgent();
        this.httpsKeepAliveAgent = new HttpsAgent();
        // Initialize this class with a URL representing the publishing endpoint.
        this.uri = uri.replace(/\/$/, '');
    }
    // Call this method and pass a username and password to use basic
    // authentication with the configured endpoint.
    PublisherClient.prototype.setAuthBasic = function (username, password) {
        this.auth = new auth.Basic(username, password);
    };
    PublisherClient.prototype.setAuthJwt = function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.auth = new ((_a = auth.Jwt).bind.apply(_a, __spreadArrays([void 0], args)))();
    };
    // The publish method for publishing the specified item to the specified
    // channel on the configured endpoint.
    PublisherClient.prototype.publish = function (channel, item) {
        return __awaiter(this, void 0, void 0, function () {
            var i, authHeader;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = item.export();
                        i.channel = channel;
                        authHeader = this.auth != null ? this.auth.buildHeader() : null;
                        return [4 /*yield*/, this._startPubCall(this.uri, authHeader, [i])];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    // An internal method for starting the work required for publishing
    // a message. Accepts the URI endpoint, authorization header, items
    // object, and optional callback as parameters.
    PublisherClient.prototype._startPubCall = function (uri, authHeader, items) {
        return __awaiter(this, void 0, void 0, function () {
            var content, headers, publishUri, parsed, reqParams, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        content = JSON.stringify({ items: items });
                        headers = {
                            'Content-Type': 'application/json',
                            'Content-Length': String(Buffer.byteLength(content, 'utf8')),
                        };
                        if (authHeader != null) {
                            headers['Authorization'] = authHeader;
                        }
                        publishUri = uri + '/publish/';
                        parsed = new URL(publishUri);
                        reqParams = {
                            method: 'POST',
                            headers: headers,
                            body: content,
                            agent: undefined,
                        };
                        _a = parsed.protocol;
                        switch (_a) {
                            case 'http:': return [3 /*break*/, 1];
                            case 'https:': return [3 /*break*/, 2];
                        }
                        return [3 /*break*/, 3];
                    case 1:
                        reqParams.agent = this.httpKeepAliveAgent;
                        return [3 /*break*/, 5];
                    case 2:
                        reqParams.agent = this.httpsKeepAliveAgent;
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 0); })];
                    case 4:
                        _b.sent();
                        throw new PublishException('Bad URI', { statusCode: -2 });
                    case 5: return [4 /*yield*/, this._performHttpRequest(fetch, publishUri, reqParams)];
                    case 6:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    // An internal method for performing the HTTP request for publishing
    // a message with the specified parameters.
    PublisherClient.prototype._performHttpRequest = function (transport, uri, reqParams) {
        return __awaiter(this, void 0, void 0, function () {
            var res, err_1, context, mode, data, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        res = null;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, transport(uri, reqParams)];
                    case 2:
                        res = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        throw new PublishException(err_1.message, { statusCode: -1 });
                    case 4:
                        context = {
                            statusCode: res.status,
                            headers: res.headers,
                        };
                        _a.label = 5;
                    case 5:
                        _a.trys.push([5, 7, , 8]);
                        mode = 'end';
                        return [4 /*yield*/, res.text()];
                    case 6:
                        data = _a.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        err_2 = _a.sent();
                        mode = 'close';
                        data = err_2;
                        return [3 /*break*/, 8];
                    case 8:
                        this._finishHttpRequest(mode, data, context);
                        return [2 /*return*/];
                }
            });
        });
    };
    // An internal method for finishing the HTTP request for publishing
    // a message.
    PublisherClient.prototype._finishHttpRequest = function (mode, httpData, context) {
        context.httpBody = httpData;
        if (mode === 'end') {
            if (context.statusCode < 200 || context.statusCode >= 300) {
                throw new PublishException(JSON.stringify(context.httpBody), context);
            }
        }
        else if (mode === 'close') {
            throw new PublishException('Connection closed unexpectedly', context);
        }
    };
    return PublisherClient;
}());
export default PublisherClient;
//# sourceMappingURL=PublisherClient.js.map