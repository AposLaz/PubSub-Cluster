import { createGripChannelHeader, parseChannels } from '../utilities/grip';
import { createKeepAliveHeader, createMetaHeader, createNextLinkHeader } from '../utilities/http';
var GripInstruct = /** @class */ (function () {
    function GripInstruct(channels) {
        this.channels = [];
        this.timeout = 0;
        this.keepAliveTimeout = 0;
        this.nextLinkTimeout = 0;
        if (channels != null) {
            this.addChannel(channels);
        }
    }
    GripInstruct.prototype.addChannel = function (channels) {
        var _a;
        (_a = this.channels).push.apply(_a, parseChannels(channels));
    };
    GripInstruct.prototype.setStatus = function (status) {
        this.status = status;
    };
    GripInstruct.prototype.setHoldLongPoll = function (timeout) {
        this.hold = 'response';
        if (timeout != null) {
            this.timeout = Math.floor(timeout);
        }
    };
    GripInstruct.prototype.setHoldStream = function () {
        this.hold = 'stream';
    };
    GripInstruct.prototype.setKeepAlive = function (data, timeout) {
        this.keepAlive = data;
        this.keepAliveTimeout = timeout;
    };
    GripInstruct.prototype.setNextLink = function (uri, timeout) {
        if (timeout === void 0) { timeout = 0; }
        this.nextLink = uri;
        this.nextLinkTimeout = timeout;
    };
    GripInstruct.prototype.toHeaders = function (additionalHeaders) {
        var headers = {};
        headers['Grip-Channel'] = createGripChannelHeader(this.channels);
        if (this.status != null) {
            headers['Grip-Status'] = "" + this.status; // Convert to string
        }
        if (this.hold != null) {
            headers['Grip-Hold'] = this.hold;
            if (this.timeout > 0) {
                headers['Grip-Timeout'] = "" + this.timeout; // Convert to string
            }
            if (this.keepAlive != null) {
                headers['Grip-Keep-Alive'] = createKeepAliveHeader(this.keepAlive, this.keepAliveTimeout);
            }
            if (this.meta != null && Object.entries(this.meta).length > 0) {
                headers['Grip-Set-Meta'] = createMetaHeader(this.meta);
            }
        }
        if (this.nextLink != null) {
            headers['Grip-Link'] = createNextLinkHeader(this.nextLink, this.nextLinkTimeout);
        }
        Object.assign(headers, additionalHeaders);
        return headers;
    };
    return GripInstruct;
}());
export default GripInstruct;
//# sourceMappingURL=GripInstruct.js.map