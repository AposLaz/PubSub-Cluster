import { Buffer } from 'buffer';
// The Response class is used to represent a set of HTTP response data.
// Populated instances of this class are serialized to JSON and passed
// to the GRIP proxy in the body. The GRIP proxy then parses the message
// and deserialized the JSON into an HTTP response that is passed back
// to the client.
var Response = /** @class */ (function () {
    function Response() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var code, reason, headers, body;
        // Initialize with the message code, reason, headers, and body to send
        // to the client when the message is published. If only one parameter
        // is passed then treat it as a dictionary object containing all of
        // the data in the form of key/value pairs.
        if (args.length === 1) {
            (_a = args[0], _b = _a.code, code = _b === void 0 ? null : _b, _c = _a.reason, reason = _c === void 0 ? null : _c, _d = _a.headers, headers = _d === void 0 ? null : _d, _e = _a.body, body = _e === void 0 ? null : _e);
        }
        else {
            _f = args[0], code = _f === void 0 ? null : _f, _g = args[1], reason = _g === void 0 ? null : _g, _h = args[2], headers = _h === void 0 ? null : _h, _j = args[3], body = _j === void 0 ? null : _j;
        }
        this.code = code;
        this.reason = reason;
        this.headers = headers;
        this.body = body;
    }
    // Export this Response instance into a dictionary containing all
    // of the non-null data. If the body is set to a buffer then export
    // it as 'body-bin' (as opposed to 'body') and encode it as base64.
    Response.prototype.export = function () {
        var obj = {};
        if (this.code != null) {
            obj.code = this.code;
        }
        if (this.reason != null) {
            obj.reason = this.reason;
        }
        if (this.headers != null) {
            obj.headers = this.headers;
        }
        if (this.body != null) {
            if (Buffer.isBuffer(this.body)) {
                obj['body-bin'] = this.body.toString('base64');
            }
            else {
                obj['body'] = this.body.toString();
            }
        }
        return obj;
    };
    return Response;
}());
export default Response;
//# sourceMappingURL=Response.js.map