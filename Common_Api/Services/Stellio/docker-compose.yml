version: '3.5'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    hostname: zookeeper
    container_name: zookeeper
    networks:
      - default
    ports:
      - "2181"
  kafka:
    build: .
    # container_name: kafka
    #hostname: kafka
    ports:
      - "9092"
    environment:
      HOSTNAME_COMMAND: "docker info | grep ^Name: | cut -d' ' -f 2"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://_{HOSTNAME_COMMAND}:9094
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      #KAFKA_CREATE_TOPICS: "ENTITY_APPEND:4:2"
      # KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      # KAFKA_DEFAULT_REPLICATION_FACTOR: 2
    depends_on:
      - zookeeper
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - default

  neo4j:
    image: neo4j:4.0
    container_name: stellio-neo4j
    volumes:
      - stellio-neo4j-storage:/data
    environment:
      - NEO4J_dbms_allow__upgrade=${NEO4J_ALLOW_UPGRADE}
      - NEO4J_dbms_default__database=${NEO4J_DEFAULT_DATABASE}
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - "NEO4J_dbms_security_procedures_unrestricted=apoc.*"
      - "NEO4J_dbms_security_procedures_whitelist=apoc.*"
      - NEO4JLABS_PLUGINS=["apoc"]
    ports:
      - 7474:7474
      - 7687:7687
    networks:
      - default

  postgres:
    image: stellio/stellio-timescale-postgis:1.7.2-pg11
    container_name: stellio-postgres
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - "POSTGRES_MULTIPLE_DATABASES=${STELLIO_SEARCH_DB_DATABASE},${STELLIO_SEARCH_DB_USER},${STELLIO_SEARCH_DB_PASSWORD}: ${STELLIO_SUBSCRIPTION_DB_DATABASE},${STELLIO_SUBSCRIPTION_DB_USER},${STELLIO_SUBSCRIPTION_DB_PASSWORD}"
      # not sure it is really necessary but it does not break anything ...
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - 5432:5432
    volumes:
      - stellio-postgres-storage:/var/lib/postgresql/data
    networks:
      - default

  api-gateway:
    container_name: stellio-api-gateway
    image: stellio/stellio-api-gateway:${STELLIO_DOCKER_TAG}
    environment:
      - SPRING_PROFILES_ACTIVE=${ENVIRONMENT}
    ports:
      - 8080:8080
    networks:
      - default
      - stellio-proxy-net-end

  entity-service:
    container_name: stellio-entity-service
    hostname: entity-service
    image: stellio/stellio-entity-service:${STELLIO_DOCKER_TAG}
    environment:
      - SPRING_DATA_NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - SPRING_PROFILES_ACTIVE=${ENVIRONMENT}
      - APPLICATION_AUTHENTICATION_ENABLED=${STELLIO_AUTHENTICATION_ENABLED}
    ports:
      - 8082:8082
    depends_on:
      - neo4j
      - kafka
    networks:
      - default
      - stellio-proxy-net
      - stellio-proxy-net-end

  search-service:
    container_name: stellio-search-service
    image: stellio/stellio-search-service:${STELLIO_DOCKER_TAG}
    environment:
      - SPRING_PROFILES_ACTIVE=${ENVIRONMENT}
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres/${STELLIO_SEARCH_DB_DATABASE}
      - SPRING_FLYWAY_URL=jdbc:postgresql://postgres/${STELLIO_SEARCH_DB_DATABASE}
      - SPRING_R2DBC_USERNAME=${STELLIO_SEARCH_DB_USER}
      - SPRING_R2DBC_PASSWORD=${STELLIO_SEARCH_DB_PASSWORD}
      - APPLICATION_AUTHENTICATION_ENABLED=${STELLIO_AUTHENTICATION_ENABLED}
    ports:
      - 8085:8085
    depends_on:
      - postgres
      - kafka
    networks:
      - default
      - stellio-proxy-net
      - stellio-proxy-net-end

  subscription-service:
    container_name: stellio-subscription-service
    image: stellio/stellio-subscription-service:${STELLIO_DOCKER_TAG}
    environment:
      - SPRING_PROFILES_ACTIVE=${ENVIRONMENT}
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres/${STELLIO_SUBSCRIPTION_DB_DATABASE}
      - SPRING_FLYWAY_URL=jdbc:postgresql://postgres/${STELLIO_SUBSCRIPTION_DB_DATABASE}
      - SPRING_R2DBC_USERNAME=${STELLIO_SUBSCRIPTION_DB_USER}
      - SPRING_R2DBC_PASSWORD=${STELLIO_SUBSCRIPTION_DB_PASSWORD}
      - APPLICATION_AUTHENTICATION_ENABLED=${STELLIO_AUTHENTICATION_ENABLED}
    ports:
      - 8084:8084
    depends_on:
      - postgres
      - kafka
    networks:
      - default
      - stellio-proxy-net
      - stellio-proxy-net-end


  prometheus:
     image: prom/prometheus:latest
     container_name: prometheus
     volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
     command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
     expose:
      - 9090
     ports:
      - 9090:9090

  grafana:
     image: grafana/grafana
     container_name: grafana
     network_mode: host
     restart: always
     ports:
      - 9000:3000
     volumes:
      - grafana-data:/var/lib/grafana


volumes:
  stellio-neo4j-storage:
  stellio-postgres-storage:
  grafana-data:
  prometheus_data: {}


networks:
    default: # this network (app2)
        driver: bridge
    stellio-proxy-net:
        external:
            name: stellio_network
    stellio-proxy-net-end:
        external:
            name: stellio_network_end