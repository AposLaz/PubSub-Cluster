version: "3.8"
# Uncomment all
services: 

    app:
        container_name: docker-node
        hostname: docker-node
        restart: always
        build: .
        command: nodemon /usr/src/app/index.js
        ports:
            - '3001:3001'
        volumes:
            - .:/usr/src/app
        networks:
            - scorpio-proxy-net
            - new-proxy-net
            - proxynet
        # network_mode: host
        # networks:
        #   - proxynet
       
  # prometheus:
    #  image: prom/prometheus:latest
    #  container_name: prometheus
    #  volumes:
    #   - ./prometheus.yml:/etc/prometheus/prometheus.yml
    #   - prometheus_data:/prometheus
    #  command:
    #   - '--config.file=/etc/prometheus/prometheus.yml'
    #   - '--storage.tsdb.path=/prometheus'
    #   - '--web.console.libraries=/etc/prometheus/console_libraries'
    #   - '--web.console.templates=/etc/prometheus/consoles'
    #   - '--web.enable-lifecycle'
    #  expose:
    #   - 9090
    #  ports:
    #   - 9090:9090

  # grafana:
    #  image: grafana/grafana
    #  container_name: grafana
    #  network_mode: host
    #  restart: always
    #  ports:
    #   - 9000:3000
    #  volumes:
    #   - grafana-data:/var/lib/grafana


networks:
    default:
        driver: bridge
    proxynet:
       name: custom_network
    new-proxy-net:      #stellio
        name: stellio_network
    scorpio-proxy-net:
        name: scorpio_network
    new-orion-net:
        name: orion_network
    proxynet-push:
        name: push_network
    proxynet-faye:
        name: faye_network
    proxynet-kafka:
        name: kafka_network

# volumes:
#   grafana-data:
#   prometheus_data: {}


    # zookeeper:
    #   image: confluentinc/cp-zookeeper:5.4.1
    #   container_name: zookeeper
    #   ports:
    #     - 2181:2181
    #   environment:
    #     ZOOKEEPER_SERVER_ID: 1
    #     ZOOKEEPER_CLIENT_PORT: 2181
    #     ZOOKEEPER_TICK_TIME: 2000
    #   networks:
    #     - default
    #     - localnet
    #     - proxynet-kafka

    # kafka:
    #   image: confluentinc/cp-enterprise-kafka:latest
    #   container_name: kafka
    #   ports:
    #     - 9092:9092
    #     - 9101:9101
    #   environment:
    #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    #     KAFKA_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:29092 ## Den to eixa prin
    #     KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:29092
    #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
    #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    #     ES_JAVA_OPTS: "-Xms512m -Xmx3000m"
    #     KAFKA_BROKER_ID: 1
    #     KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
    #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

    #     KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
    #   # KAFKA_JMX_OPTS: '-Djava.rmi.server.hostname=127.0.1.1 -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.rmi.port=9091 -Dcom.sun.management.jmxremote.port=9091 -Dcom.sun.management.jmxremote.authenticate=false  -Dcom.sun.management.jmxremote.ssl=false'
    #     KAFKA_JMX_PORT: 9101
    #     KAFKA_JMX_HOSTNAME: localhost
    #     #KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
    #     CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:9092
    #   # CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
    #     CONFLUENT_METRICS_ENABLE: 'true'
    #     CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous' 
    #     ###
    #     KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081 
    #   depends_on:
    #     - zookeeper
    #   networks:
    #     - default
    #     - localnet
    #     #- my-proxy-net-kafka
    #     - proxynet-kafka

    # schema-registry:
    #   image: confluentinc/cp-schema-registry:6.1.0
    #   hostname: schema-registry
    #   container_name: schema-registry
    #   networks:
    #         - default
    #         - localnet
    #         - proxynet-kafka
    #   depends_on:
    #     - kafka
    #   ports:
    #     - "8081"
    #   environment:
    #     SCHEMA_REGISTRY_HOST_NAME: schema-registry
    #     SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:9092'
    #     SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

        
    # connect:
    #   image: confluentinc/kafka-connect-datagen:latest
    #   #image: cnfldemos/cp-server-connect-datagen:0.4.0-6.0.1
    #   build:
    #     context: ./connect
    #     dockerfile: Dockerfile
    #   hostname: connect
    #   container_name: connect
    #   depends_on:
    #     - kafka
    #     - schema-registry
    #   networks:
    #     - default
    #     - localnet
    #     - proxynet-kafka
    #   ports:
    #     - "8083:8083"
    #   environment:
    #     CONNECT_BOOTSTRAP_SERVERS: 'kafka:9092'
    #     CONNECT_REST_ADVERTISED_HOST_NAME: connect
    #     CONNECT_REST_PORT: 8083
    #     CONNECT_GROUP_ID: compose-connect-group
    #     CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
    #     CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
    #     CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
    #     CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
    #     CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
    #     CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
    #     CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
        
    #     CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
    #     CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
    #     # Mongodb
    #     CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
    #     CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
    #     CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
    #     CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    #     # end mongoDB
    #     # CLASSPATH required due to CC-2422
    #     CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-6.0.1.jar
    #     CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
    #     CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
    #     CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components,/etc/kafka-connect/jars"
    #     CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR,org.apache.kafka.connect.runtime.rest=WARN,com.mongodb.kafka=DEBUG
    #   command: "bash -c 'if [ ! -d /usr/share/confluent-hub-components/confluentinc-kafka-connect-datagen ]; then echo \"WARNING: Did not find directory for kafka-connect-datagen (did you remember to run: docker-compose up -d --build ?)\"; fi ; /etc/confluent/docker/run'"
    #   volumes:
    #     - ./kafka-connect-mongodb:/usr/share/confluent-hub-components/kafka-connect-mongodb

    # control-center:
    #   image: confluentinc/cp-enterprise-control-center:6.0.1
    #   hostname: control-center
    #   container_name: control-center
    #   depends_on:
    #     - kafka
    #     - connect
    #     - schema-registry
    #   networks:
    #     - default
    #     - localnet
    #     - proxynet-kafka
    #   ports:
    #     - "9021:9021"
    #   environment:
    #     CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:9092'
    #     CONTROL_CENTER_REPLICATION_FACTOR: 1
    #     CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
    #     CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
    #     CONFLUENT_METRICS_TOPIC_REPLICATION: 1
    #     PORT: 9021
    #     CONTROL_CENTER_CONNECT_CLUSTER: 'connect:8083'
    #     CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
    
    
    # rest-proxy:
    #   image: confluentinc/cp-kafka-rest:6.1.0
    #   depends_on:
    #     - kafka
    #     - schema-registry
    #   networks:
    #     - default
    #     - localnet
    #     - proxynet-kafka
    #   ports:
    #     - 8082:8082
    #   hostname: rest-proxy
    #   container_name: rest-proxy
    #   environment:
    #     KAFKA_REST_HOST_NAME: rest-proxy
    #     KAFKA_REST_BOOTSTRAP_SERVERS: 'kafka:9092'
    #     KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
    #     KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'

    # #mongo-db:
    #  #   image: mongo:3.6
    #  #   hostname: mongo-db
    #   #  container_name: mongo-db
    #    # expose:
    #    #     - "27017"
    #    # ports:
    #    #     - "27017:27017"
    #    # networks:
    #    #     - default
    #    # command: --nojournal
    #    # healthcheck:
    #    #  test: |
    #    #    host=`mongo-db --ip-address || echo '127.0.0.1'`; 
    #    #    mongo --quiet $host/test --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' && echo 0 || echo 1

    # # MongoDB Replica Set
    # mongo1:
    #   image: "mongo:4.0-xenial"
    #   container_name: mongo1
    #   command: --replSet rs0 --smallfiles --oplogSize 128
    #   volumes:
    #     - rs1:/data/db
    #   networks:
    #     - localnet
    #     - default
    #     - mongo_conn
    #   ports:
    #     - 27017
    #   restart: always

    # mongo2:
    #   image: "mongo:4.0-xenial"
    #   container_name: mongo2
    #   command: --replSet rs0 --smallfiles --oplogSize 128
    #   volumes:
    #     - rs2:/data/db
    #   networks:
    #     - localnet
    #     - default
    #     - mongo_conn
    #   ports:
    #     - "27018:27017"
    #   restart: always

    # mongo3:
    #   image: "mongo:4.0-xenial"
    #   container_name: mongo3
    #   command: --replSet rs0 --smallfiles --oplogSize 128
    #   volumes:
    #     - rs3:/data/db
    #   networks:
    #     - localnet
    #     - default
    #     - mongo_conn
    #   ports:
    #     - "27019:27017"
    #   restart: always


# networks:
#     default:
#         driver: bridge
#     proxynet:
#        name: custom_network
#     new-proxy-net:      #stellio
#         name: stellio_network
#     scorpio-proxy-net:
#         name: scorpio_network
#     new-orion-net:
#         name: orion_network
#     proxynet-push:
#         name: push_network
#     proxynet-faye:
#         name: faye_network
#     proxynet-kafka:
#         name: kafka_network
#     localnet:
#       attachable: true
#     mongo_conn:
#         name: mongo_db

# volumes:
#   rs1:
#   rs2:
#   rs3:
#containers communication
#https://stackoverflow.com/questions/38088279/communication-between-multiple-docker-compose-projects
